/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package ve572.h4.ex3.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Grade extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Grade\",\"namespace\":\"ve572.h4.ex3.avro\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"score\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public int score;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public Grade() {}

  /**
   * All-args constructor.
   */
  public Grade(java.lang.CharSequence name, java.lang.CharSequence id, java.lang.Integer score) {
    this.name = name;
    this.id = id;
    this.score = score;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return id;
    case 2: return score;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: id = (java.lang.CharSequence)value$; break;
    case 2: score = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'score' field.
   */
  public java.lang.Integer getScore() {
    return score;
  }

  /**
   * Sets the value of the 'score' field.
   * @param value the value to set.
   */
  public void setScore(java.lang.Integer value) {
    this.score = value;
  }

  /** Creates a new Grade RecordBuilder */
  public static ve572.h4.ex3.avro.Grade.Builder newBuilder() {
    return new ve572.h4.ex3.avro.Grade.Builder();
  }
  
  /** Creates a new Grade RecordBuilder by copying an existing Builder */
  public static ve572.h4.ex3.avro.Grade.Builder newBuilder(ve572.h4.ex3.avro.Grade.Builder other) {
    return new ve572.h4.ex3.avro.Grade.Builder(other);
  }
  
  /** Creates a new Grade RecordBuilder by copying an existing Grade instance */
  public static ve572.h4.ex3.avro.Grade.Builder newBuilder(ve572.h4.ex3.avro.Grade other) {
    return new ve572.h4.ex3.avro.Grade.Builder(other);
  }
  
  /**
   * RecordBuilder for Grade instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Grade>
    implements org.apache.avro.data.RecordBuilder<Grade> {

    private java.lang.CharSequence name;
    private java.lang.CharSequence id;
    private int score;

    /** Creates a new Builder */
    private Builder() {
      super(ve572.h4.ex3.avro.Grade.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(ve572.h4.ex3.avro.Grade.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.score)) {
        this.score = data().deepCopy(fields()[2].schema(), other.score);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Grade instance */
    private Builder(ve572.h4.ex3.avro.Grade other) {
            super(ve572.h4.ex3.avro.Grade.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.score)) {
        this.score = data().deepCopy(fields()[2].schema(), other.score);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public ve572.h4.ex3.avro.Grade.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public ve572.h4.ex3.avro.Grade.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public ve572.h4.ex3.avro.Grade.Builder setId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'id' field */
    public ve572.h4.ex3.avro.Grade.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'score' field */
    public java.lang.Integer getScore() {
      return score;
    }
    
    /** Sets the value of the 'score' field */
    public ve572.h4.ex3.avro.Grade.Builder setScore(int value) {
      validate(fields()[2], value);
      this.score = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'score' field has been set */
    public boolean hasScore() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'score' field */
    public ve572.h4.ex3.avro.Grade.Builder clearScore() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Grade build() {
      try {
        Grade record = new Grade();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.score = fieldSetFlags()[2] ? this.score : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
